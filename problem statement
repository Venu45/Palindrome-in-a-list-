Today's task is to create a doubly linked list and perform the following operations:

i) Check for any loop in the list

ii) Delete the loop node (The node to which the cycle pointer of some other node points)

iii) After deletion, check whether the sequence of elements in the list form a palindrome.

Each node in the list has 3 pointers namely previous, next and cycle. The previous pointer contains the address of the previous node and the next pointer contains the address of the next node in the sequence. The cycle pointer will point to any one of the nodes in the list thereby forming a cycle.

The doubly linked list should be created using the following commands:

1) add

2) save

3) loop

Add command adds a node with given data to the end of the list. Save command saves the address of the node at tail. Loop command adds a pointer from tail node to the node whose address was saved previously. The save command works if and only if there is atleast one node in the list. There should be some saved node for the loop command to work.

Input Format

The first line is an integer n representing the number of commands. The subsequent n lines represent n commands. The commands can take 3 values 1, 2 or 3. 1 corresponds to add, 2 to save and 3 to loop. If the command is 1, it should be followed by an integer m denoting the number of nodes to be added and m integers representing the data d. If the command is 2 or 3, no additional data follows.

Constraints

1 <= n <= pow(10,4);
0 <= m <= pow(10,4);
0 <= d <=pow(10,3);
Output Format

The output consists of 3 lines. The first line consists of the node's data in the list after its creation and is separated by space.

The second line consists of the elements in the list after the deletion of loop nodes (if any) and is separated by space. NULL should be printed if the list is  empty.

The third line is a string S that takes two values. YES if the sequence is a palindrome and NO otherwise. If the list is empty, then it should be considered as no palindromic sequence.

Sample Input 0

5
1 3 88 7 6
2
1 1 7
3
1 1 88
Sample Output 0

88 7 6 7 88
88 7 7 88
YES
